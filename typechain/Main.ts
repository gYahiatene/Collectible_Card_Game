/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MainInterface extends utils.Interface {
  functions: {
    "cardCount()": FunctionFragment;
    "count()": FunctionFragment;
    "createCardInCollection(uint256,string,string)": FunctionFragment;
    "createCollection(string,uint256,string)": FunctionFragment;
    "getAllCard()": FunctionFragment;
    "getAllCollections()": FunctionFragment;
    "getCardInfo(address)": FunctionFragment;
    "getCardInfoById(uint256)": FunctionFragment;
    "getCardOfCollection(uint256)": FunctionFragment;
    "getCollection(address)": FunctionFragment;
    "getOwnerOf(uint256)": FunctionFragment;
    "transferCard(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cardCount"
      | "count"
      | "createCardInCollection"
      | "createCollection"
      | "getAllCard"
      | "getAllCollections"
      | "getCardInfo"
      | "getCardInfoById"
      | "getCardOfCollection"
      | "getCollection"
      | "getOwnerOf"
      | "transferCard"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cardCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCardInCollection",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCardInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardInfoById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardOfCollection",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCard",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "cardCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCardInCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardInfoById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardOfCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwnerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCard",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Main extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cardCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    createCardInCollection(
      collectionId: PromiseOrValue<BigNumberish>,
      cardName: PromiseOrValue<string>,
      imageUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCollection(
      name: PromiseOrValue<string>,
      cardCount: PromiseOrValue<BigNumberish>,
      imageURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllCard(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllCollections(overrides?: CallOverrides): Promise<[string[]]>;

    getCardInfo(
      _card: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string]>;

    getCardInfoById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    getCardOfCollection(
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCollection(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber, string]>;

    getOwnerOf(
      idCard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferCard(
      cardId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cardCount(overrides?: CallOverrides): Promise<BigNumber>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  createCardInCollection(
    collectionId: PromiseOrValue<BigNumberish>,
    cardName: PromiseOrValue<string>,
    imageUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCollection(
    name: PromiseOrValue<string>,
    cardCount: PromiseOrValue<BigNumberish>,
    imageURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllCard(overrides?: CallOverrides): Promise<BigNumber>;

  getAllCollections(overrides?: CallOverrides): Promise<string[]>;

  getCardInfo(
    _card: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, string]>;

  getCardInfoById(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  getCardOfCollection(
    collectionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCollection(
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, BigNumber, string]>;

  getOwnerOf(
    idCard: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferCard(
    cardId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cardCount(overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    createCardInCollection(
      collectionId: PromiseOrValue<BigNumberish>,
      cardName: PromiseOrValue<string>,
      imageUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCollection(
      name: PromiseOrValue<string>,
      cardCount: PromiseOrValue<BigNumberish>,
      imageURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllCard(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCollections(overrides?: CallOverrides): Promise<string[]>;

    getCardInfo(
      _card: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string]>;

    getCardInfoById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    getCardOfCollection(
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCollection(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber, string]>;

    getOwnerOf(
      idCard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferCard(
      cardId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cardCount(overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    createCardInCollection(
      collectionId: PromiseOrValue<BigNumberish>,
      cardName: PromiseOrValue<string>,
      imageUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCollection(
      name: PromiseOrValue<string>,
      cardCount: PromiseOrValue<BigNumberish>,
      imageURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllCard(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCollections(overrides?: CallOverrides): Promise<BigNumber>;

    getCardInfo(
      _card: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCardInfoById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCardOfCollection(
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollection(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerOf(
      idCard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferCard(
      cardId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cardCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCardInCollection(
      collectionId: PromiseOrValue<BigNumberish>,
      cardName: PromiseOrValue<string>,
      imageUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCollection(
      name: PromiseOrValue<string>,
      cardCount: PromiseOrValue<BigNumberish>,
      imageURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllCard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCardInfo(
      _card: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCardInfoById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCardOfCollection(
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollection(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerOf(
      idCard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferCard(
      cardId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
